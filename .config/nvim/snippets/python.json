{
  "for t test_cases": {
        "prefix": "fort",
        "body": [
            "for _ in range(int(input())):",
            "\t$0"
        ],
        "description": "for t test cases"
    },
    "array_input": {
        "prefix": "intl",
        "body": [
            "${1:A} = list(map(int,input().strip().split()))$0"
        ],
        "description": "input list of ints"
    },
    "int(input())": {
        "prefix": "n=",
        "body": [
            "n = int(input())",
            "$0"
        ],
        "description": "int(input())"
    },
    "string_input":{
        "prefix": "s=",
        "body": ["s = input()","$0"],
        "description": "s = input()"
    },
    "test_locally": {
        "prefix": "tets",
        "body": [
            "import sys",
            "standard_input, standard_output = sys.stdin, sys.stdout",
            "with open(\"input.txt\") as inp, open('output.txt', 'w') as out:",
            "    sys.stdin, sys.stdout = inp, out",
            "    $0"
        ],
        "description": "test_locally"
    },
    "space separated integers input": {
        "prefix": "intm",
        "body": [
            "${1:a,b} = map(int,input().strip().split())$0"
        ],
        "description": "space separated integers input"
    },
    "line ": {
      "prefix": "line",
      "body": [
        "from math import gcd, sqrt",
        "class line:",
        "    def __init__(s):",
        "        s.A = s.B =s.C = None",
        "        s.isint = None",
        "        s.prec = 1e-6",
        "    def from_endpoints(s, x0,y0, x1,y1, isint=False, prec=None):",
        "        s.isint = isint",
        "        if prec is not None: s.prec = prec",
        "        ",
        "        s.A = y0 - y1",
        "        s.B = x1 - x0",
        "        s.C = -s.A * x0  - s.B * y0",
        "",
        "        s.normalize()",
        "",
        "        return s",
        "    def normalize(s):",
        "        # A,B,C needs to be not None",
        "        if s.isint is None: raise ValueError(f\"`isint` is not initialized, {s.a=}, {s.b=}, {s.c=}\")",
        "        if s.isint:",
        "            g = gcd(gcd(s.A,s.B),s.C)",
        "            s.A //= g",
        "            s.B //= g",
        "            s.C //= g",
        "            if (s.A<0) or (s.A==0 and s.B<0):",
        "                s.A *= -1",
        "                s.B *= -1",
        "                s.C *= -1",
        "        else:",
        "            z = sqrt(s.A*s.A + s.B*s.B)",
        "            if (s.A <= -s.prec or ((-s.prec<=s.A<=s.prec) and s.B <= -s.prec)): z *= -1",
        "            s.A /= z",
        "            s.B /= z",
        "            s.C /= z",
        "        return s",
        "    def __str__(s): return f'{s.A}x + {s.B}y + {s.C} = 0'",
        "    def __repr__(s): return f'{s.A}x + {s.B}y + {s.C} = 0, {s.isint=}, {s.prec}'",
        "    def __eq__(l1,l2):",
        "        # they need to be normalized beforehand !",
        "        return (l1.A == l2.A) and (l1.B == l2.B) and (l1.C == l2.C)",
        "$0"
      ],
      "description": "line "
    },
    "integer root": {
        "prefix": "int_root",
        "body": [
          "def int_pow(a,b):",
          "    ans = 1",
          "    p = a",
          "    while b>0:",
          "        if (b&1): ans *= p",
          "        p *= p",
          "        b >>= 1 ",
          "    # for _ in range(b): ans *= a",
          "    return ans",
          "",
          "def highest_power_of_2_less_than_n(n):",
          "    i = 1",
          "    while i <= n: i <<= 1",
          "    return i",
          "",
          "def int_root(n,k):",
          "    ans = 0",
          "    x = highest_power_of_2_less_than_n(n)",
          "    while x != 0:",
          "        # print(f\"checking {ans=} {x=}\")",
          "        if int_pow(ans + x,k) <= n: ans += x",
          "        x >>= 1",
          "    return ans ",
          "$0"
        ],
        "description": "integer root"
      },
      "fast input": {
        "prefix": "fast",
        "body": [
          "import sys;input=sys.stdin.readline",
          "$0"
        ],
        "description": "fast input"
      },
      "solve_t_test_cases": {
        "prefix": "solt",
        "body": [
          "import sys;input=sys.stdin.readline",
          "",
          "def solve():",
          "    ${1:n = int(input())}",
          "    $0",
          "",
          "for _ in range(int(input())): solve()"
        ],
        "description": "solve_t_test_cases"
      },
      "solve_t_test_cases_pretty": {
        "prefix": "soltn",
        "body": [
          "import sys;input=sys.stdin.readline",
          "",
          "def solve(${2:n,m}):",
          "    $0",
          "",
          "for _ in range(int(input())): ",
          "    ${1:n,m = map(int,input().strip().split())}",
          "    print(solve(${2:n,m}))"
        ],
        "description": "solve_t_test_cases_pretty"
      },
      "prime_factors dict": {
        "prefix": "factor",
        "body": [
          "from collections import defaultdict",
          "",
          "",
          "def prime_factors(n):",
          "    t = n",
          "    if n == 0: return defaultdict(int)",
          "    f = defaultdict(int)",
          "    if not(t&1):",
          "        while not(t&1):",
          "            f[2] += 1",
          "            t >>= 1",
          "    i = 3",
          "    while i * i <= t:",
          "        if t % i == 0:",
          "            while t % i == 0:",
          "                f[i] += 1",
          "                t //= i",
          "        i += 2",
          "    if t>1: f[t] += 1",
          "    return dict(f)",
          "",
          "$0"
        ],
        "description": "prime_factors dict"
      },
      "very_fast_io": {
        "prefix": "boost",
        "body": [
          "from io import BytesIO, IOBase",
          "import os",
          "import sys",
          "",
          "BUFSIZE = 8192",
          "",
          "",
          "class FastIO(IOBase):",
          "    newlines = 0",
          "",
          "    def __init__(self, file):",
          "        self._fd = file.fileno()",
          "        self.buffer = BytesIO()",
          "        self.writable = \"x\" in file.mode or \"r\" not in file.mode",
          "        self.write = self.buffer.write if self.writable else None",
          "",
          "    def read(self):",
          "        while True:",
          "            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))",
          "            if not b:",
          "                break",
          "            ptr = self.buffer.tell()",
          "            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)",
          "        self.newlines = 0",
          "        return self.buffer.read()",
          "",
          "    def readline(self):",
          "        while self.newlines == 0:",
          "            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))",
          "            self.newlines = b.count(b\"\\n\") + (not b)",
          "            ptr = self.buffer.tell()",
          "            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)",
          "        self.newlines -= 1",
          "        return self.buffer.readline()",
          "",
          "    def flush(self):",
          "        if self.writable:",
          "            os.write(self._fd, self.buffer.getvalue())",
          "            self.buffer.truncate(0), self.buffer.seek(0)",
          "",
          "",
          "class IOWrapper(IOBase):",
          "    def __init__(self, file):",
          "        self.buffer = FastIO(file)",
          "        self.flush = self.buffer.flush",
          "        self.writable = self.buffer.writable",
          "        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))",
          "        self.read = lambda: self.buffer.read().decode(\"ascii\")",
          "        self.readline = lambda: self.buffer.readline().decode(\"ascii\")",
          "",
          "",
          "sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)",
          "def input(): return sys.stdin.readline().rstrip('\\r\\n')",
          "",
          "$0"
        ],
        "description": "very_fast_io"
      },
      "YES NO solve": {
        "prefix": "YES",
        "body": [
          "print(\"YES\" if solve() else \"NO\")"
        ],
        "description": "YES NO solve"
      },
      "bootstrap for deep recursion": {
        "prefix": "recursion",
        "body": [
          "# REPLACE ALL INSTANCES OF RETURN IN THE FUNCTION WITH YIELD",
          "# AND ALSO WHENEVER THE FUNCTION RETURNS A VALUE, EG",
          "# before:",
          "#     X = recurse(A,B)",
          "# after:",
          "#     X = yield recurse(A,B)",
          "from types import GeneratorType",
          "def bootstrap(f, stack=[]):",
          "    # https://codeforces.com/blog/entry/80158",
          "    def wrappedfunc(*args, **kwargs):",
          "        if stack:",
          "            return f(*args, **kwargs)",
          "        else:",
          "            to = f(*args, **kwargs)",
          "            while True:",
          "                if type(to) is GeneratorType:",
          "                    stack.append(to)",
          "                    to = next(to)",
          "                else:",
          "                    stack.pop()",
          "                    if not stack:",
          "                        break",
          "                    to = stack[-1].send(to)",
          "            return to",
          "    return wrappedfunc"
        ],
        "description": "bootstrap for deep recursion"
      },
      "cpp style cout": {
        "prefix": "cout",
        "body": [
          "megic = b\"X>D+Ca&#bbd2<S5Y+-YAAa8SYa%Ev{Itm~lARuIAW*}c*Y;\\$O7W^`X)D05|OW-K6KDLM)uARr(hARr)VW*}i8Jv|_0Ze(ma3LqdLARr(hARr(hAai+hE^~BbZ*_DocXDZTWhf\\$CZXziPARr(hARr(hARr(hb9r+vb97{Hb#yLfY;|*JC@BgcARr(hARr)RY;\\$Eg3LqdLARr(hARr(hAai+hE^~BbZ*_DocXDZTWhirWawuUbDGDGUARr(hARuyObairWAaiAGW(s3(b#yEsWo~3_AUz;&b98cLVQnZWEFf=UYGq?|C@B\";from base64 import b85decode as mage;exec(mage(megic).decode())",
          "$0"
        ],
        "description": "cpp style cout"
      }
}